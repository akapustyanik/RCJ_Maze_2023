# Untitled - By: Savma - Вс окт 1 2023

import sensor, image, time, math

sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)

sensor.set_brightness(3)
sensor.set_contrast(3)

clock = time.clock()

letter =(11, 37, -13, 18, -17, 17)

k = 1.2

mas = [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 0, 1], [1, 0, 1], [1, 1, 1]], [[1, 0, 1], [1, 1, 1], [1, 0, 1]]]

def sgn(a):
    if a > 0: return 1
    if a < 0: return -1
    return 0

while(True):
    clock.tick()
    img = sensor.snapshot()
    for let in img.find_blobs([letter], merge = True, margin = 20):
        min_corners = list(let.min_corners())
        norm_corners = [0, 0, 0, 0]
        alphas = [0, 0, 0, 0]
        for i in range(4):
            alphas[i] = math.atan2(let.cy() - min_corners[i][1], min_corners[i][0] - let.cx()) * 180 / math.pi
        for i in range(3):
            for j in range(3-i):
                if alphas[j] > alphas[j+1]:
                    alphas[j], alphas[j+1] = alphas[j+1], alphas[j]
                    min_corners[j], min_corners[j+1] = min_corners[j+1], min_corners[j]
        h = math.sqrt((min_corners[3][0] - min_corners[0][0]) ** 2 + (min_corners[3][1] - min_corners[0][1]) ** 2)
        w = math.sqrt((min_corners[1][0] - min_corners[0][0]) ** 2 + (min_corners[1][1] - min_corners[0][1]) ** 2)
        beta = math.atan2(min_corners[3][0] - min_corners[0][0], min_corners[0][1] - min_corners[3][1]) * 180 / math.pi
        if abs(beta) > 45:
            if beta < 0:
                alphas[0], alphas[1], alphas[2], alphas[3] = alphas[3], alphas[0], alphas[1], alphas[2]
                min_corners[0], min_corners[1], min_corners[2], min_corners[3] = min_corners[3], min_corners[0], min_corners[1], min_corners[2]
            else:
                alphas[0], alphas[1], alphas[2], alphas[3] = alphas[1], alphas[2], alphas[3], alphas[0]
                min_corners[0], min_corners[1], min_corners[2], min_corners[3] = min_corners[1], min_corners[2], min_corners[3], min_corners[0]
            h, w = w, h
            beta = 90 * -sgn(beta) + beta
        for i in range(4):
            img.draw_string(min_corners[i][0], min_corners[i][1], str(i))
        a1 = math.cos(beta * math.pi / 180) * h
        a2 = math.sin(beta * math.pi / 180) * h
        b1 = math.cos(beta * math.pi / 180) * w
        b2 = math.sin(beta * math.pi / 180) * w
        my_mas1 = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
        flag = 0
        #print(a1, a2, b1, b2)
        try:
            for i in range(9):
                xroi = min(max(int(min_corners[0][0] + a2 / 6 + b1 / 3 * (i % 3) + a2 / 3 * (i // 3) - b1 / 3 * (((k - 1) / 45 * abs(beta)) / 2)), 0), img.width())
                yroi = min(max(int(min_corners[0][1] + b2 / 6 + b2 / 3 * (i % 3) - a1 / 3 * (i // 3) - a1 / 3 * (((k - 1) / 45 * abs(beta)) / 2 + 1)), 0), img.height())
                wroi = int(b1 / 3 * (((k - 1) / 45 * abs(beta)) + 1))
                hroi = int(a1 / 3 * (((k - 1) / 45 * abs(beta)) + 1))
                #print(i, xroi, yroi, int(b1 / 3), int(a1 / 3))
                for small in img.find_blobs([letter], roi = (xroi, yroi, wroi, hroi), merge = True, margin = int(w + h)):
                    img.draw_rectangle(xroi, yroi, wroi, hroi)
                    my_mas1[2 - i // 3][i % 3] = 1
        except:
            pass
        my_mas2 = [my_mas1[2], my_mas1[1], my_mas1[0]]
        my_mas3 = [[my_mas1[2][0], my_mas1[1][0], my_mas1[0][0]], [my_mas1[2][1], my_mas1[1][1], my_mas1[0][1]], [my_mas1[2][2], my_mas1[1][2], my_mas1[0][2]]]
        my_mas4 = [[my_mas1[0][2], my_mas1[1][2], my_mas1[2][2]], [my_mas1[0][1], my_mas1[1][1], my_mas1[2][1]], [my_mas1[0][0], my_mas1[1][0], my_mas1[2][0]]]
        for j in range(3):
            if my_mas1 == mas[j] or my_mas2 == mas[j] or my_mas3 == mas[j] or my_mas4 == mas[j]:
                flag = j + 1
                break
        print(flag, (my_mas1 == mas[0]))
